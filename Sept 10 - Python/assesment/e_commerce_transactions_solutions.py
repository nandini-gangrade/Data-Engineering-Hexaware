# E-commerce Transactions Data Solutions

# Import required libraries
from pyspark.sql import SparkSession
from pyspark.sql.functions import sum, avg, max, count, col, when

# Initialize Spark session
spark = SparkSession.builder.appName('ECommerceTransactions').getOrCreate()

# Load the dataset
data = spark.read.csv("/content/e_commerce_transactions.csv", header=True, inferSchema=True)

# Exercise 1
# 1. Calculate the Total Revenue per Category
# Group the data by category and calculate the total revenue generated by each category.
# Hint: Multiply price by quantity and apply the discount to get the actual revenue.
revenue_per_category = data.withColumn(
    "revenue", (data["price"] * data["quantity"]) * (1 - data["discount_percentage"] / 100)
).groupBy("category").agg(sum("revenue").alias("total_revenue"))
print("Total revenue per category:")
revenue_per_category.show()

# Exercise 2
# 2. Filter Transactions with a Discount Greater Than 10%
# Filter the dataset to show only transactions where the discount percentage is greater than 10%.
discount_greater_than_10 = data.filter(data["discount_percentage"] > 10)
print("Transactions with a discount greater than 10%:")
discount_greater_than_10.show()

# Exercise 3
# 3. Find the Most Expensive Product Sold
# Identify the product with the highest individual price.
most_expensive_product = data.orderBy(col("price").desc()).limit(1)
print("Most expensive product sold:")
most_expensive_product.show()

# Exercise 4
# 4. Calculate the Average Quantity of Products Sold per Category
# Group the data by category and calculate the average quantity of products sold in each category.
avg_quantity_per_category = data.groupBy("category").agg(avg("quantity").alias("avg_quantity"))
print("Average quantity of products sold per category:")
avg_quantity_per_category.show()

# Exercise 5
# 5. Identify Customers Who Purchased More Than One Product
# Filter the data to show only customers who purchased more than one product in a single transaction.
multiple_products_customers = data.groupBy("transaction_id").agg(sum("quantity").alias("total_quantity")) \
    .filter(col("total_quantity") > 1)
print("Customers who purchased more than one product:")
multiple_products_customers.show()

# Exercise 6
# 6. Find the Top 3 Highest Revenue Transactions
# Calculate the total revenue for each transaction and identify the top 3 highest revenue transactions.
revenue_per_transaction = data.withColumn(
    "revenue", (data["price"] * data["quantity"]) * (1 - data["discount_percentage"] / 100)
).groupBy("transaction_id").agg(sum("revenue").alias("total_revenue")).orderBy(col("total_revenue").desc()).limit(3)
print("Top 3 highest revenue transactions:")
revenue_per_transaction.show()

# Exercise 7
# 7. Calculate the Total Number of Transactions per Day
# Group the data by transaction_date and calculate the total number of transactions for each day.
total_transactions_per_day = data.groupBy("transaction_date").agg(count("transaction_id").alias("total_transactions"))
print("Total number of transactions per day:")
total_transactions_per_day.show()

# Exercise 8
# 8. Find the Customer Who Spent the Most Money
# Calculate the total amount spent by each customer and identify the customer with the highest total spending.
total_spent_per_customer = data.withColumn(
    "revenue", (data["price"] * data["quantity"]) * (1 - data["discount_percentage"] / 100)
).groupBy("customer_id").agg(sum("revenue").alias("total_spent")).orderBy(col("total_spent").desc()).limit(1)
print("Customer who spent the most money:")
total_spent_per_customer.show()

# Exercise 9
# 9. Calculate the Average Discount Given per Product Category
# Group the data by category and calculate the average discount percentage applied to products in each category.
avg_discount_per_category = data.groupBy("category").agg(avg("discount_percentage").alias("avg_discount"))
print("Average discount given per product category:")
avg_discount_per_category.show()

# Exercise 10
# 10. Create a New Column for Final Price After Discount
# Add a new column final_price that calculates the total price after applying the discount.
data = data.withColumn(
    "final_price", data["price"] * (1 - data["discount_percentage"] / 100)
)
print("New column for final price after discount:")
data.show()
