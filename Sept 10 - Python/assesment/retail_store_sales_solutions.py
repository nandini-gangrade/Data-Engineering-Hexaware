# Retail Store Sales Data Solutions (continued)

# Exercise 1
# 1. Calculate the Total Revenue per Category
# Group the data by category and calculate the total revenue generated by each category.
total_revenue_per_category = data.groupBy("category").agg(sum(col("price") * col("quantity")).alias("total_revenue"))
print("Total revenue per category:")
total_revenue_per_category.show()

# Exercise 2
# 2. Filter Transactions Where Price is Greater Than $50
# Filter the dataset to show only transactions where the price of the product is greater than $50.
high_price_transactions = data.filter(data["price"] > 50)
print("Transactions where price is greater than $50:")
high_price_transactions.show()

# Exercise 3
# 3. Find the Most Expensive Product Sold
# Identify the product with the highest price in the dataset.
most_expensive_product = data.orderBy(col("price").desc()).limit(1)
print("Most expensive product sold:")
most_expensive_product.show()

# Exercise 4
# 4. Calculate the Average Quantity Sold per Product
# Group the data by product_name and calculate the average quantity sold for each product.
avg_quantity_per_product = data.groupBy("product_name").agg(avg("quantity").alias("avg_quantity"))
print("Average quantity sold per product:")
avg_quantity_per_product.show()

# Exercise 5
# 5. Find the Top 3 Most Sold Products by Total Quantity
# For each product, calculate the total quantity sold and find the top 3 products with the highest total quantity.
total_quantity_per_product = data.groupBy("product_name").agg(sum("quantity").alias("total_quantity"))
top_3_products = total_quantity_per_product.orderBy(col("total_quantity").desc()).limit(3)
print("Top 3 most sold products by total quantity:")
top_3_products.show()

# Exercise 6
# 6. Calculate the Total Sales for Each Day
# Group the data by sales_date and calculate the total sales (revenue) for each day.
total_sales_per_day = data.groupBy("sales_date").agg(sum(col("price") * col("quantity")).alias("total_sales"))
print("Total sales for each day:")
total_sales_per_day.show()

# Exercise 7
# 7. Identify the Product Category with the Highest Average Price
# Group the data by category and calculate the average price for each category. Find the category with the highest average price.
avg_price_per_category = data.groupBy("category").agg(avg("price").alias("avg_price"))
highest_avg_price_category = avg_price_per_category.orderBy(col("avg_price").desc()).limit(1)
print("Product category with the highest average price:")
highest_avg_price_category.show()

# Exercise 8
# 8. Find the Most Frequent Transaction Day of the Week
# Extract the day of the week from the sales_date and find which day has the most transactions.
from pyspark.sql.functions import dayofweek

data_with_day_of_week = data.withColumn("day_of_week", dayofweek(col("sales_date")))
transactions_per_day_of_week = data_with_day_of_week.groupBy("day_of_week").agg(count("transaction_id").alias("num_transactions"))
most_frequent_day = transactions_per_day_of_week.orderBy(col("num_transactions").desc()).limit(1)
print("Most frequent transaction day of the week:")
most_frequent_day.show()

# Exercise 9
# 9. Calculate the Total Revenue for Each Product
# Group the data by product_name and calculate the total revenue generated by each product.
total_revenue_per_product = data.groupBy("product_name").agg(sum(col("price") * col("quantity")).alias("total_revenue"))
print("Total revenue for each product:")
total_revenue_per_product.show()

# Exercise 10
# 10. Create a New Column to Classify Products as 'High' or 'Low' Value
# Add a new column product_value that classifies a product as 'High' if the average price of the product is greater than $30, otherwise classify it as 'Low'.
from pyspark.sql.functions import avg

# Calculate the average price per product
avg_price_per_product = data.groupBy("product_name").agg(avg("price").alias("avg_price"))
# Join this data with the original dataset
data_with_avg_price = data.join(avg_price_per_product, "product_name")
# Create a new column to classify products as 'High' or 'Low' value
data_with_value_classification = data_with_avg_price.withColumn("product_value", when(col("avg_price") > 30, "High").otherwise("Low"))
print("New column to classify products as 'High' or 'Low' value:")
data_with_value_classification.show()
